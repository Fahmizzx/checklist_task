/*!
 * jQuery Repeater
 * https://github.com/DubFriend/jquery.repeater
 */
(function ($) {
  "use strict";

  var identity = function (x) {
    return x;
  };

  var isArray = function (value) {
    return $.isArray(value);
  };

  var isObject = function (value) {
    return !isArray(value) && value instanceof Object;
  };

  var isNumber = function (value) {
    return value instanceof Number;
  };

  var isFunction = function (value) {
    return value instanceof Function;
  };

  var indexOf = function (object, value) {
    return $.inArray(value, object);
  };

  var inArray = function (array, value) {
    return indexOf(array, value) !== -1;
  };

  var foreach = function (collection, callback) {
    for (var i in collection) {
      if (collection.hasOwnProperty(i)) {
        callback(collection[i], i, collection);
      }
    }
  };

  var last = function (array) {
    return array[array.length - 1];
  };

  var argumentsToArray = function (args) {
    return Array.prototype.slice.call(args);
  };

  var extend = function () {
    var extended = {};
    foreach(argumentsToArray(arguments), function (o) {
      foreach(o, function (val, key) {
        extended[key] = val;
      });
    });
    return extended;
  };

  var mapToArray = function (collection, callback) {
    var mapped = [];
    foreach(collection, function (value, key, coll) {
      mapped.push(callback(value, key, coll));
    });
    return mapped;
  };

  var mapToObject = function (collection, callback, keyCallback) {
    var mapped = {};
    foreach(collection, function (value, key, coll) {
      key = keyCallback ? keyCallback(key, value) : key;
      mapped[key] = callback(value, key, coll);
    });
    return mapped;
  };

  var map = function (collection, callback, keyCallback) {
    return isArray(collection)
      ? mapToArray(collection, callback)
      : mapToObject(collection, callback, keyCallback);
  };

  var pluck = function (arrayOfObjects, key) {
    return map(arrayOfObjects, function (val) {
      return val[key];
    });
  };

  var filter = function (collection, callback) {
    var filtered;

    if (isArray(collection)) {
      filtered = [];
      foreach(collection, function (val, key, coll) {
        if (callback(val, key, coll)) {
          filtered.push(val);
        }
      });
    } else {
      filtered = {};
      foreach(collection, function (val, key, coll) {
        if (callback(val, key, coll)) {
          filtered[key] = val;
        }
      });
    }

    return filtered;
  };

  var call = function (collection, functionName, args) {
    return map(collection, function (object, name) {
      return object[functionName].apply(object, args || []);
    });
  };

  var makeSetup = function (fn) {
    fn.setup = fn;
    return fn;
  };

  //
  // Repeater
  //

  var getSetup = makeSetup(function ($) {
    var setup = {
      setList: function ($element, value) {
        $element.data("list", value);
      },
      getList: function ($element) {
        return $element.data("list");
      },
    };
    var repeater = {
      list: setup.getList,
      count: function () {
        return repeater.list().length;
      },
      add: function (data) {
        var $element = repeater.list().push(data || {});
        setup.setList(repeater.list());
        return $element;
      },
      remove: function (index) {
        repeater.list().splice(index, 1);
        setup.setList(repeater.list());
      },
    };
    return repeater;
  });

  var addItem = function (repeater, $list, data) {
    var $item = repeater.add(data);
    $list.append($item);
    return $item;
  };

  $.fn.repeater = function (options) {
    var $container = $(this),
      $list = $container.find("[data-repeater-list]").first(),
      $items = $list.find("[data-repeater-item]"),
      repeater = getSetup($),
      addButtonSelector = "[data-repeater-create]",
      deleteButtonSelector = "[data-repeater-delete]";

    // Initialize the repeater list
    setup.setList($container, $items);

    $container.on("click", addButtonSelector, function (e) {
      e.preventDefault();
      var $item = addItem(repeater, $list);
      if (options && options.show) {
        options.show($item);
      }
    });

    $container.on("click", deleteButtonSelector, function (e) {
      e.preventDefault();
      var $item = $(this).closest("[data-repeater-item]"),
        index = $items.index($item);
      repeater.remove(index);
      $item.remove();
      if (options && options.hide) {
        options.hide($item);
      }
    });

    return repeater;
  };
})(jQuery);
